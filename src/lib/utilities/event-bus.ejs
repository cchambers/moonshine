<%- htmlWebpackPlugin.options.docsHead %>

<title><%= htmlWebpackPlugin.options.title %></title>

<div class="documentation contain">
  <h1>Event Bus</h1>
  <section id="usage">
    <h2>Usage</h2>
    <p>Using event-based handlers provides a decoupled way of communicating between components, which can make the application more flexible and easier to maintain. By using events, components don't need to know about each other's implementation details or how to call each other's methods directly, which can help reduce code coupling and make it easier to swap out or update components as needed.</p>
    <p>Additionally, events allow for more fine-grained control over when and how components communicate with each other. For example, a component can choose to only listen for certain events, or it can choose to only emit certain events under certain conditions. This can help prevent unnecessary method calls and make the application more efficient.</p>
    <p>Overall, using event-based handlers can provide a more loosely-coupled and flexible architecture for Shine, which can make the application more maintainable and easier to update over time.</p>
    <pre>
      <code class="language-javascript">
        vm.$bus.$on( 'some-event', (data) => { ... } );
        vm.$bus.$emit( 'some-event', { data } );
      </code>
    </pre>

    <p>The Event Bus is exposed for emitting on the front end at <code>window.sh.emit('event-name', { payload })</code></p>
  </section>

  <section id="changelog">
    <h2>Changelog</h2>
    <dl>
      <dt>0.1.0</dt>
      <dd>Event Bus created.</dd>
      <dt>1.0.0</dt>
      <dd>*soon* Collect and hold all events pre-render, dispatch when page is ready.</dd>
    </dl>
  </section>
</div>

<%- htmlWebpackPlugin.options.docsFoot %>
